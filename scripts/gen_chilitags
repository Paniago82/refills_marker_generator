#!/usr/bin/env python

#  Copyright (C) 2018, Georg Bartels <georg.bartels@cs.uni-bremen.de>.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse

from refills_marker_generator.chilitag_generator import ChilitagGenerator

if __name__ == '__main__':

    try:
        parser = argparse.ArgumentParser(description="Create some augmented 'Chilitag' QR markers for printing.")
        parser.add_argument('first', type=int, help='The first number to encode. It has to be between 1 and 1023.')
        parser.add_argument('last',  type=int, nargs='?', help="The last number to encode. It has to be between 1 and 1023,"
                                                               "and it has to be also greater than 'first'.")
        args = parser.parse_args()

        if args.first not in range(1, 1024):
            raise ValueError("First number to encode has to be between 1 and 1023. "
                             "Instead, {} was given.".format(args.first))
        if args.last:
            if args.last not in range(1, 1024):
                raise ValueError("Last number to encode has to be between 1 and 1023. "
                                 "Instead, {} was given.".format(args.last))
            if args.last < args.first:
                raise ValueError("Last number to encode has to be greater than first number to encode. "
                                 "Instead, first was '{}' and last was '{}'.".format(args.first, args.last))
            for i in range(args.first, args.last + 1):
                gen = ChilitagGenerator(i)
                gen.run()
        else:
            gen = ChilitagGenerator(args.first)
            gen.run()
    except StandardError as e:
        print "Program died with: {}".format(e.message)
